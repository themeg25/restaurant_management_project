from django.db import models
from django.contrib.auth.models import User
from home.models import MenuItem

class Order(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name="orders")
        created_at = models.DateTimeField(auto_now_add=True)
            total_price = models.DecimalField(max_digits=10, decimal_places=2)

                def __str__(self):
                        return f"Order #{self.id} by {self.user.username}"


                        class OrderItem(models.Model):
                            order = models.ForeignKey(Order, on_delete=models.CASCADE, related_name="items")
                                menu_item = models.ForeignKey(MenuItem, on_delete=models.CASCADE)
                                    quantity = models.PositiveIntegerField(default=1)
                                        price = models.DecimalField(max_digits=8, decimal_places=2)  # Price at order time

                                            def __str__(self):
                                                    return f"{self.menu_item.name} (x{self.quantity})"from rest_framework import serializers
                                                    from .models import Order, OrderItem

                                                    class OrderItemSerializer(serializers.ModelSerializer):
                                                        menu_item_name = serializers.CharField(source='menu_item.name', read_only=True)

                                                            class Meta:
                                                                    model = OrderItem
                                                                            fields = ['menu_item_name', 'quantity', 'price']


                                                                            class OrderSerializer(serializers.ModelSerializer):
                                                                                items = OrderItemSerializer(many=True, read_only=True)  # Nested serializer
                                                                                    order_id = serializers.IntegerField(source='id', read_only=True)

                                                                                        class Meta:
                                                                                                model = Order
                                                                                                        fields from rest_framework.views import APIView
                                                                                                        from rest_framework.response import Response
                                                                                                        from rest_framework.permissions import IsAuthenticated
                                                                                                        from rest_framework import status
                                                                                                        from .models import Order
                                                                                                        from .serializers import OrderSerializer
                                                                                                        
                                                                                                        class OrderHistoryView(APIView):
                                                                                                            permission_classes = [IsAuthenticated]  # Requires authentication
                                                                                                            
                                                                                                                def get(self, request):
                                                                                                                        user = request.user
                                                                                                                                orders = Order.objects.filter(user=user).order_by('-created_at')
                                                                                                                                
                                                                                                                                        if not orders.exists():
                                                                                                                                                    return Response(
                                                                                                                                                                        {"message": "No orders found."},
                                                                                                                                                                                        status=status.HTTP_404_NOT_FOUND
                                                                                                                                                                                                    )

                                                                                                                                                                                                            serializer = OrderSerializer(orders, many=True)
                                                                                                                                                                                                                    return Response(serializer.data, status=status.HTTP_200_OK)
                                                                                                                                                    )= ['order_id', 'created_at', 'total_price', 'items']